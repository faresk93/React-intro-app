{"version":3,"sources":["square.js","board.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","_","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"+OAEe,SAASA,EAAOC,GAC3B,OACI,4BAAQC,UAAU,SACVC,QAASF,EAAME,SAClBF,EAAMG,O,ICHEC,E,qLACJC,GAAI,IAAD,OACZ,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,SAAAM,GAAC,OAAI,EAAKR,MAAME,QAAQG,Q,+BAKhD,OACI,6BACI,yBAAKJ,UAAU,aAEVK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAEvB,yBAAKR,UAAU,aACVK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAEvB,yBAAKR,UAAU,aACVK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,S,GAxBJC,IAAMC,WCEnCC,E,YACF,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KACDa,MAAQ,CACTC,QAAS,CAAC,CACNP,QAASQ,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPD,E,yEAWPb,GACR,IAAMS,EAAUR,KAAKO,MAAMC,QAAQK,MAAM,EAAGb,KAAKO,MAAMK,WAAa,GAE9DX,EADUO,EAAQA,EAAQM,OAAS,GACjBb,QAAQY,QAC5BE,EAAgBd,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKO,MAAMI,QAAU,IAAM,IACxCX,KAAKgB,SAAS,CACVR,QAASA,EAAQS,OAAO,CACpB,CAAChB,QAASA,KAEdU,SAAUX,KAAKO,MAAMI,QACrBC,WAAYJ,EAAQM,Y,6BAIrBI,GACHlB,KAAKgB,SAAS,CACVJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,+BAItB,IAiBFC,EAjBC,OACCX,EAAUR,KAAKO,MAAMC,QACrBY,EAAUZ,EAAQR,KAAKO,MAAMK,YAC7BS,EAASN,EAAgBK,EAAQnB,SAEjCqB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACI,wBAAIE,IAAKF,GACL,4BAAQ5B,QAAS,SAAAM,GACb,EAAKyB,OAAOH,KACZC,OAahB,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmBrB,KAAKO,MAAMI,QAAU,IAAM,KAIvD,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAOM,QAASmB,EAAQnB,QAASL,QAAS,SAACG,GAAD,OAAO,EAAK6B,YAAY7B,OAEtE,yBAAKJ,UAAU,aACX,6BAAMwB,GACN,4BAAKG,S,GAnENlB,IAAMC,WAgFzB,SAASU,EAAgBd,GAWrB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF9B,EAAI,EAAGA,EAAI8B,EAAMf,OAAQf,IAAK,CAAC,IAAD,cACjB8B,EAAM9B,GADW,GAC5B+B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAGvB,OAAO,KAtBXG,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.7287e176.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Square(props) {\r\n    return (\r\n        <button className=\"square\"\r\n                onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./square\";\r\n\r\nexport default class Board extends React.Component {\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]}\r\n                       onClick={_ => this.props.onClick(i)}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {/*<Square value={0} />*/}\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Board from \"./board\";\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0\r\n        }\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([\r\n                {squares: squares}\r\n            ]),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={_ => {\r\n                        this.jumpTo(move)\r\n                    }}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        // winner or next player status\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board squares={current.squares} onClick={(i) => this.handleClick(i)}/>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}